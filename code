#include "stm32f4xx.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_usart.h"
#include "stdio.h"
#include "bit_band.h"
int cam_value=0;
volatile int WZT=0;
unsigned char dhtll_data[5];
static TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
static TIM_OCInitTypeDef   TIM_OCInitStructure;
EXTI_InitTypeDef   EXTI_InitStructure;
volatile int count=0;
volatile int NUM=0;
volatile unsigned char d;
static GPIO_InitTypeDef  	GPIO_InitStructure;
static USART_InitTypeDef 	USART_InitStructure;
static NVIC_InitTypeDef 	NVIC_InitStructure;		

unsigned char g_usart1_recv_buf[128]={0};
unsigned char g_usart1_recv_cnt = 0;

unsigned char g_usart3_recv_buf[128]={0};
unsigned char g_usart3_recv_cnt = 0;
volatile int FLAG=0;
int distance;
void led_init()
{  
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9| GPIO_Pin_10;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   GPIO_Init(GPIOF, &GPIO_InitStructure);

	
   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13| GPIO_Pin_14;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   GPIO_Init(GPIOE, &GPIO_InitStructure);
   PEout(14)=1;
   PEout(13)=1;
   PFout(10)=1;
   PFout(9)=1;
	
}
void key_init()
{     
	/* Enable GPIOA clock GPIO硬件时钟使能*/
   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	 /* Configure PA0 pin as input floating 配置GPIO信息结构体*/
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
   GPIO_Init(GPIOA, &GPIO_InitStructure); //配置GPIOA 0引脚
	  /* Enable GPIOE clock GPIO硬件时钟使能*/
   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	/* Configure PA0 pin as input floating 配置GPIO信息结构体*/
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3| GPIO_Pin_4;
   GPIO_Init(GPIOE, &GPIO_InitStructure); //配置GPIOE 234引脚


}
void key1_exti0_init()
{
	  /* Connect EXTI Line0 to PA0 pin 把中断控制线0链接到PA0引脚*/
   SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
 
   /* Configure EXTI Line0 配置外部中断控制线0的信息结构体*/
   EXTI_InitStructure.EXTI_Line = EXTI_Line0; 				//选择中断控制线0
   EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; 		//外部中断事件
   EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;   //上升沿
   EXTI_InitStructure.EXTI_LineCmd = ENABLE;				//使能外部中断控制线0
   EXTI_Init(&EXTI_InitStructure);							//初始化
 
   /* Enable and set EXTI Line0 Interrupt to the lowest priority设置外部中断控制线0的优先级 */
   NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;				//设置外部中断控制线0的优先级
   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00; //设置抢占优先级0xF
   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;		//设置响应优先级0xF
   NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;				//使能外部中断控制线0的优先级
   NVIC_Init(&NVIC_InitStructure);	
   
	

}	
void key2_exti2_init()
{
  
  SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource2);
   EXTI_InitStructure.EXTI_Line = EXTI_Line2; 				//选择中断控制线2
   EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; 		//外部中断事件
   EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;   //上升沿
   EXTI_InitStructure.EXTI_LineCmd = ENABLE;				//使能外部中断控制线2
   EXTI_Init(&EXTI_InitStructure);							//初始化
 
   /* Enable and set EXTI Line0 Interrupt to the lowest priority设置外部中断控制线2的优先级 */
   NVIC_InitStructure.NVIC_IRQChannel = EXTI2_IRQn;				//设置外部中断控制线2的优先级
   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01; //设置抢占优先级
   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;		//设置响应优先级
   NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;				//使能外部中断控制线2的优先级
   NVIC_Init(&NVIC_InitStructure);	



}
void key3_exti3_init()
{
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource3);
   EXTI_InitStructure.EXTI_Line = EXTI_Line3; 				//选择中断控制线3
   EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; 		//外部中断事件
   EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;   //上升沿
   EXTI_InitStructure.EXTI_LineCmd = ENABLE;				//使能外部中断控制线3
   EXTI_Init(&EXTI_InitStructure);							//初始化
 
   /* Enable and set EXTI Line0 Interrupt to the lowest priority设置外部中断控制线3的优先级 */
   NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQn;				//设置外部中断控制线3的优先级
   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02; //设置抢占优先级
   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02;		//设置响应优先级
   NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;				//使能外部中断控制线3的优先级
   NVIC_Init(&NVIC_InitStructure);
}
void key4_exti4_init()
{

   
  SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource4);
   EXTI_InitStructure.EXTI_Line = EXTI_Line4; 				//选择中断控制线4
   EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt; 		//外部中断事件
   EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;   //上升沿
   EXTI_InitStructure.EXTI_LineCmd = ENABLE;				//使能外部中断控制线4
   EXTI_Init(&EXTI_InitStructure);							//初始化
 
   /* Enable and set EXTI Line0 Interrupt to the lowest priority设置外部中断控制线4的优先级 */
   NVIC_InitStructure.NVIC_IRQChannel = EXTI4_IRQn;				//设置外部中断控制线4的优先级
   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x03; //设置抢占优先级
   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x03;		//设置响应优先级
   NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;				//使能外部中断控制线4的优先级
   NVIC_Init(&NVIC_InitStructure);	

}
void EXTI0_IRQHandler(void)
{
	//判断外部中断控制线 0   是否触发，等于1就是触发
	if(EXTI_GetITStatus(EXTI_Line0) != RESET)
	{      
		    
			WZT=1;
	 
	 /* Clear the EXTI line 0 pending bit 清除外部中断触发标志*/
	 EXTI_ClearITPendingBit(EXTI_Line0);
	}
}
  
void EXTI2_IRQHandler(void)
{

//判断外部中断控制线2   是否触发，等于1就是触发
	if(EXTI_GetITStatus(EXTI_Line2) != RESET)
	{   WZT =2;
		
	 
	 /* Clear the EXTI line 2 pending bit 清除外部中断触发标志*/
	 EXTI_ClearITPendingBit(EXTI_Line2);
	}



}
void EXTI3_IRQHandler(void)
{
	if(EXTI_GetITStatus(EXTI_Line3) != RESET)
	{         
	WZT =3;
	 /* Clear the EXTI line 0 pending bit 清除外部中断触发标志*/
	 EXTI_ClearITPendingBit(EXTI_Line3);
	}

}

void EXTI4_IRQHandler(void)
{   
 if(EXTI_GetITStatus(EXTI_Line4) != RESET)
 {   
	WZT=4;
	  NUM++;
	 if( NUM>=3)
		  NUM=1;
		
	 /* Clear the EXTI line 0 pending bit 清除外部中断触发标志*/
	 EXTI_ClearITPendingBit(EXTI_Line4);
	}

}

void BEEP_Init(void)
{    	 
  
	//使能GPIOE，GPIOF时钟
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE | RCC_AHB1Periph_GPIOF, ENABLE);			

	//GPIOF9,F10初始化设置 
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_8;		//LED0和LED1对应IO口
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;			    	//普通输出模式，
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;					//推挽输出，驱动LED需要电流驱动
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;		    	//100MHz
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;				    //上拉
	GPIO_Init(GPIOF, &GPIO_InitStructure);							//初始化GPIOF，把配置的数据写入寄存器						


		
}
void LED_Init(void)
{    	 
  
	//使能GPIOE，GPIOF时钟
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE | RCC_AHB1Periph_GPIOF, ENABLE);			

	//GPIOF9,F10初始化设置 
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_9 | GPIO_Pin_10;		//LED0和LED1对应IO口
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;			    	//普通输出模式，
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;					//推挽输出，驱动LED需要电流驱动
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;		    	//100MHz
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;				    //上拉
	GPIO_Init(GPIOF, &GPIO_InitStructure);							//初始化GPIOF，把配置的数据写入寄存器						


	//GPIOE13,PE14初始化设置 
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_13 | GPIO_Pin_14;		//LED2和LED3对应IO口
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;					//普通输出模式
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;					//推挽输出
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;				//100MHz
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;					//上拉
	GPIO_Init(GPIOE, &GPIO_InitStructure);							//初始化GPIOE，把配置的数据写入寄存器

	GPIO_SetBits(GPIOF,GPIO_Pin_9  | GPIO_Pin_10);			    	//GPIOF9,PF10设置高，灯灭
	GPIO_SetBits(GPIOE,GPIO_Pin_13 | GPIO_Pin_14);		
}
void TIM1_CH3_PWMoutout()	 
 {
 RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
//RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
//RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);

RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//配置复用功能（第二功能模式）--PWM
   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   GPIO_Init(GPIOE, &GPIO_InitStructure);
	
GPIO_PinAFConfig(GPIOE, GPIO_PinSource13, GPIO_AF_TIM1);
	
	/* Time base configuration TIM3的时钟频率为84MHz */							//84M/预分频值/二次分频值 === 每一秒计数次数					
   TIM_TimeBaseStructure.TIM_Period = 100;					//定时时间100ms(100HZ) --> 84000000/8400/1000*100
   TIM_TimeBaseStructure.TIM_Prescaler = 16800;						//预分频值 ---》8400
   TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;					//二次分频值 -->1
   TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //向上计数
 
   TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);  //初始化



TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;            	//选择定时器模式:TIM脉冲宽度调制模式2
TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;	//比较输出使能
TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;     	//输出极性:TIM输出比较极性低
TIM_OC3Init(TIM1, &TIM_OCInitStructure);                    	//根据T指定的参数初始化外设TIM1 4OC1

TIM_OC3PreloadConfig(TIM1,TIM_OCPreload_Enable);  
  TIM_ARRPreloadConfig(TIM1, ENABLE);
   /* TIM3 enable counter 开始计时*/
   TIM_Cmd(TIM1, ENABLE);
TIM_CtrlPWMOutputs(TIM1, ENABLE);

	
 
 

 
 }
 void TIM13_CH1_PWM_OUTOUT()
{  

 RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM13, ENABLE);


RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//配置复用功能（第二功能模式）--PWM
   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   GPIO_Init(GPIOF, &GPIO_InitStructure);
	
GPIO_PinAFConfig(GPIOF, GPIO_PinSource8, GPIO_AF_TIM13);
	
	/* Time base configuration TIM3的时钟频率为84MHz */							//84M/预分频值/二次分频值 === 每一秒计数次数					
   TIM_TimeBaseStructure.TIM_Period = 100;					//定时时间100ms(100HZ) --> 84000000/8400/1000*100
   TIM_TimeBaseStructure.TIM_Prescaler = 8400;						//预分频值 ---》8400
   TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;					//二次分频值 -->1
   TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //向上计数
 
   TIM_TimeBaseInit(TIM13, &TIM_TimeBaseStructure);  //初始化



TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;            	//选择定时器模式:TIM脉冲宽度调制模式2
TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;	//比较输出使能
TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;     	//输出极性:TIM输出比较极性低
TIM_OC1Init(TIM13, &TIM_OCInitStructure);                    	//根据T指定的参数初始化外设TIM1 4OC1

TIM_OC1PreloadConfig(TIM1,TIM_OCPreload_Enable);  
  TIM_ARRPreloadConfig(TIM13, ENABLE);
   /* TIM3 enable counter 开始计时*/
   TIM_Cmd(TIM13, ENABLE);
TIM_CtrlPWMOutputs(TIM13, ENABLE);






}
 void delay_ms(int x)
{
	//让编译器不要优化这个变量
	volatile int i;
	
	for(i=0; i<x; i++)
	{
		//设置计数值，定时1ms
		//通过指针调用结构体里面的成员 21
		SysTick->LOAD = 21000;
		
		//开启系统定时器，开始计数
		SysTick->CTRL |= 1<<0;
		
		//计数减到0，计数完毕
		while((SysTick->CTRL & 1<<16) == 0);
		
		//关闭系统定时器
		SysTick->CTRL &= ~(0x1<<0);
	}
}

//精准延时（ms级别）
void delay_us(int x)
{
	//让编译器不要优化这个变量
	volatile int i;
	
	
	//设置计数值，定时1ms
	//通过指针调用结构体里面的成员
	SysTick->LOAD = x*21;
	SysTick->VAL =0;
	//开启系统定时器，开始计数
	SysTick->CTRL |= 1<<0;
	
	//计数减到0，计数完毕
	while((SysTick->CTRL & 1<<16) == 0);
	
	//关闭系统定时器
	SysTick->CTRL &= ~(0x1<<0);
	
}
void PG9_configure_outputmode()
{
	//使能GPIOG，GPIOG时钟
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG , ENABLE);			

	//GPIOG9初始化设置 
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_9;		//LED0和LED1对应IO口
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;			    	//普通输出模式，
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;					//推挽输出，驱动LED需要电流驱动
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;		    	//100MHz
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;				    //上拉
	GPIO_Init(GPIOG, &GPIO_InitStructure);							//初始化GPIOF，把配置的数据写入寄存器						

}
void PG9_configure_inputmode()
{
	//使能GPIOG，GPIOG时钟
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG , ENABLE);			

	//GPIOG9初始化设置 
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_9;		//LED0和LED1对应IO口
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;			    	//普通输出模式，
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				    //上拉
	GPIO_Init(GPIOG, &GPIO_InitStructure);							//初始化GPIOF，把配置的数据写入寄存器						

}

//请求DHTLL发送数据，DHTLL准备发送
int start_dhtll_ask_data()
{
	int i;
	PG9_configure_outputmode();
	PGout(9) = 0;
	delay_ms(20);
	PGout(9) = 1;
	delay_us(30);
	
	PG9_configure_inputmode();
	
	i=0;
	//在100us内，检测温湿度模块是否会，变为低电平，如果是就表示dhtll有响应
	//超时判断
	while(i<100)
	{
		if(PGin(9) == 0)
			break;
		
		delay_us(1);
		i++;
	
	}
	//超时判断
	if(i>= 100)
		return 1;
	
	
	i=0;
	//在100us内，检测温湿度模块是否会，变为低电平，如果是就表示dhtll有响应
	//超时判断
	while(i<100)
	{
		if(PGin(9) == 1)
			break;
		
		delay_us(1);
		i++;
	
	}
	//超时判断
	if(i>= 100)
		return 1;
	
	return 0; //主机发送数据请求后，DHTLL有了回应，打算发送数据
}
//读取DHTLL发送的1个字节的数据
int read_data_1_byte_from_dhtll()
{
	unsigned char data=0;
	int i;
	//
	while(PGin(9) == 1);
	for(i=0; i<8; i++)
	{
		while(PGin(9) == 0);
		delay_us(40);
		//40us后还是高电平，就表示这bit数是1
		if(1 == PGin(9))
		{
			//i=1,		1<<(7-1) == 0100 0000
			//i=2,      1<<5 == 0010 0000			
			data = data | (1<<(7-i));//
			
			while(PGin(9) == 1); //当我们这位数为1时，把高电平时间结束
		}
		else if( 0== PGin(9))
		{
		
		}
	}
	
	return data; //返回读取到的数据
}
//读取DHTLL发送的一次完整数据40bit
int read_data_all_dhtll()
{
	int i;
	
	//等待DHTLL回应，回应失败继续请求数据
	while(1 == start_dhtll_ask_data());
	
	for(i=0; i<5; i++)
	{
	
		dhtll_data[i] = read_data_1_byte_from_dhtll();
	
	
	}
	//判断校验和
	if(dhtll_data[4] == dhtll_data[0]+dhtll_data[1]+dhtll_data[2]+dhtll_data[3])
	{
		return 1;
	
	}
	return 0;
}
void pin_inti()
{
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	/* GPIOA Configuration: PA9(USART1_TX) PA10(USART1_RX) 把PA9和PA10配置为第二功能模式*/
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6;  //
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;				//复用功能，使用引脚的第二功能
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;			
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
	GPIO_Init(GPIOB, &GPIO_InitStructure);


	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);

	/* GPIOA Configuration: PA9(USART1_TX) PA10(USART1_RX) 把PA9和PA10配置为第二功能模式*/
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6;  //
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;				//复用功能，使用引脚的第二功能
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;			
	//GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 

}
void beef_dis()
{

if((distance>0)&&(distance<=20))
	{	PFout(9)=0;
		PFout(10)=0;
		PEout(13)=0;
		PEout(14)=0;
	for(cam_value=0;cam_value<20;cam_value++)
		{
		
			TIM_SetCompare1(TIM13,cam_value);
	    delay_ms(10);
		}
	
	
	}
else	if((distance>20)&&(distance<40))
	{	PFout(9)=0;
		PFout(10)=0;
		PEout(13)=0;
		
	for(cam_value=0;cam_value<40;cam_value++)
		{
		
			TIM_SetCompare1(TIM13,cam_value);
	    delay_ms(10);
		}
	
	
	}
else	if((distance>40)&&(distance<=60))
	{	PFout(9)=0;
		PFout(10)=0;
	for(cam_value=0;cam_value<60;cam_value++)
		{
		
			TIM_SetCompare1(TIM13,cam_value);
	    delay_ms(10);
		}
	
	
	}
else	if((distance>60)&&(distance<=80))
	{	PFout(9)=0;
		
	for(cam_value=0;cam_value<80;cam_value++)
		{
		
			TIM_SetCompare1(TIM13,cam_value);
	    delay_ms(10);
		}
	
	
	}
else if((distance>80)&&(distance<100))
	{	
	for(cam_value=0;cam_value<100;cam_value++)
		{
		
			TIM_SetCompare1(TIM13,cam_value);
	    delay_ms(10);
		}
	
	
	}	
	
else	
	{	
	for(cam_value=0;cam_value<100;cam_value++)
		{
		
			TIM_SetCompare1(TIM13,cam_value);
	    delay_ms(10);
		}
	 
	
	}	


}


unsigned int get_sro4_distance()
{   unsigned int t=0;
    PBout(6)=1;
	delay_us(20);
	PBout(6)=0;
	while(PEin(6)==0);
   while(PEin(6)==1)
   {
   
   delay_us(9);
	  t++;
   
   }

   t=t/2;
   t=t*3;
   return t;
   
}
void clear()
	{
   
   PEout(14)=1;
   PEout(13)=1;
   PFout(10)=1;
   PFout(9)=1;
	
}
	
void led_light(int i)	
{
  
	switch(i)
	{
		case 1:
			PFout(9) = 0;
			
			break;
		case 2:
			PFout(9) = 1;
		
			break;
		case 3:
			PFout(10) = 0;
		
			break;
		case 4:	
			PFout(10) = 1;
			
			break;
		case 5:		
			PEout(13) = 0;
			
			break;
		case 6:	
			PEout(13) = 1;
		
			break;
		case 7:
			PEout(14) = 0;
		
			break;
		case 8:
			PEout(14) = 1;
			

	}

	delay_ms(200);

}
void led_light_return(int i)	
{
  
	switch(i)
	{
		case 1:
			PFout(9) = 1;
			
			break;
		case 2:
			PFout(9) =0;
		
			break;
		case 3:
			PFout(10) = 1;
		
			break;
		case 4:	
			PFout(10) = 0;
			
			break;
		case 5:		
			PEout(13) = 1;
			
			break;
		case 6:	
			PEout(13) = 0;
		
			break;
		case 7:
			PEout(14) = 1;
		
			break;
		case 8:
			PEout(14) =0;
			

	}

	delay_ms(200);

}
void key_led()
{  int i;
		
 
if(WZT==1)
		{
		  while(1){
			  
			  PFout(9)=0;
			  delay_ms(100);
			  if(WZT != 1)
			  {  clear();  
			    break;}
		  }
		
		}
     if(WZT == 3)
			{
				while(1)
				{
					for(i=1; i<9; i++)
					{
						led_light(i);
						if(WZT != 3)
						{   clear();  
							break;}
						
					}
					if(WZT != 3)
							break;
					
				}
			}
		if(WZT ==2)
		{
		     clear();  
		
		}			
         if(WZT ==4)
		 {
			   while(1)
				{   if ( NUM==1 )
					{for(i=1; i<9; i++)
						{
							led_light(i);
							if(( NUM!=1)||(WZT != 4))
							{  clear();   
								break;}
							
						}
						}
					 if ( NUM==2 )
						{for(i=8; i>0; i--)
						{
							led_light_return(i);
							if(( NUM!=2)||( WZT != 4))
							{  clear();
								break;  }
							
						}
						}
					
				
						 if(WZT!= 4)
							break;
		 
				}
				 				 
}
		 

		}

	






void opion_BULETOOTH()
{

if(FLAG == 1)
		{  
			
			
			
			BEEP_Init();
			PFout(8)=1;
		  
		}
 else if(FLAG == 2)
		{
				GPIO_ResetBits(GPIOF,GPIO_Pin_8 );
			
		}
else if(FLAG == 3)
		{   printf("breath_led_on\n");
			
			TIM1_CH3_PWMoutout();
			
				for(cam_value=100;cam_value>0;cam_value--)
		{ 
			
		
			TIM_SetCompare3(TIM1,cam_value);
			if(FLAG != 3)
				break;
		
		delay_ms(10);}}


else if(FLAG == 4)
			{
				 LED_Init();
			GPIO_SetBits(GPIOE,GPIO_Pin_13 );
				
			}
else if(FLAG == 5)
{  TIM13_CH1_PWM_OUTOUT(); 
   pin_inti();
   distance=get_sro4_distance();
	printf("the distance is %dmm\n",distance);
    LED_Init();
	 
	beef_dis();
	delay_ms(1000);
   



}
else if(FLAG == 6)		
{    BEEP_Init();
	LED_Init();
	
    PFout(9)=1;
	PFout(10)=1;
	PEout(13)=1;
	PEout(14)=1;
    PFout(8)=0;
 


}	
else if(FLAG == 7)
{
if(1== read_data_all_dhtll())
		{
			printf("H: %d.%d\t", dhtll_data[0], dhtll_data[1]);
		
			printf("T: %d.%d\n", dhtll_data[2], dhtll_data[3]);
		}
		delay_ms(1000);



}
else if(FLAG == 8){


}



}
//重定义fputc函数 
int fputc(int ch, FILE *f)
{ 	
	USART_SendData(USART3,ch);
	while(USART_GetFlagStatus(USART3,USART_FLAG_TXE)==RESET);  
	
	return ch;
}   






void USART1_Init(uint32_t baud)
{
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE); 							//使能GPIOA时钟
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);							//使能USART1时钟
 
	//串口1对应引脚复用映射
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1); 						//GPIOA9复用为USART1
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1); 						//GPIOA10复用为USART1
	
	//USART1端口配置
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10; 						//GPIOA9与GPIOA10
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;									//复用功能
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;								//速度50MHz
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; 									//推挽复用输出
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; 									//上拉
	GPIO_Init(GPIOA,&GPIO_InitStructure); 											//初始化PA9，PA10

	//USART1 初始化设置
	USART_InitStructure.USART_BaudRate = baud;										//波特率设置
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;						//字长为8位数据格式
	USART_InitStructure.USART_StopBits = USART_StopBits_1;							//一个停止位
	USART_InitStructure.USART_Parity = USART_Parity_No;								//无奇偶校验位
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;	//无硬件数据流控制
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;					//收发模式
	USART_Init(USART1, &USART_InitStructure); 										//初始化串口1
	
	USART_Cmd(USART1, ENABLE);  													//使能串口1 
	
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);									//开启相关中断

	//Usart1 NVIC 配置
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;								//串口1中断通道
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3;							//抢占优先级3
	NVIC_InitStructure.NVIC_IRQChannelSubPriority =3;								//子优先级3
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;									//IRQ通道使能
	NVIC_Init(&NVIC_InitStructure);													//根据指定的参数初始化VIC寄存器
}

void USART3_Init(uint32_t baud)
{
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	/* GPIOB Configuration: PB10 PB11 */
	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_10 | GPIO_Pin_11  ;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;		
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	
	/* Connect USART3_TX pins to PB10 */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3);
	
	/* Connect USART3_RX pins to PB11 */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3);

	/* Enable USART3 clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
	
	USART_InitStructure.USART_BaudRate = baud;									
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;				
	USART_InitStructure.USART_StopBits = USART_StopBits_1;				
	USART_InitStructure.USART_Parity = USART_Parity_No;						
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;					
	USART_Init(USART3, &USART_InitStructure);

	 
	/* Enable the USARTx Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
	 
	/* Enable USART3 */
	USART_Cmd(USART3, ENABLE);
	
	/* Enable the Rx buffer empty interrupt */
	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
}

//发送固定字节数据到串口1
void USART1_SendBytes(uint8_t *pbuf,uint32_t len)
{

	while(len--)
	{
		USART_SendData(USART1,*pbuf++);
		while(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET); 	
	}

}
//发送字符串到串口1
void USART1_SendString(uint8_t *pstr)
{
	while(pstr && *pstr)
	{
		USART_SendData(USART1,*pstr++);
		while(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET); 		
	}
}
//发送固定长度数据到串口3
void USART3_SendBytes(unsigned char *pbuf,uint32_t len)
{

	while(len--)
	{
		USART_SendData(USART3,*pbuf++);
		while(USART_GetFlagStatus(USART3,USART_FLAG_TXE)==RESET); 	
	}

}
//发送字符串到串口3
void USART3_SendString(uint8_t *pstr)
{
	//uint8_t *p = pstr;
	
	while(pstr && *pstr)
	{
		
		USART_SendData(USART3,*pstr++);
		//USART_SendData(USART3, *p);
		//p++;
		
		while(USART_GetFlagStatus(USART3,USART_FLAG_TXE)==RESET); 		
	}
}



//蓝牙配置
uint32_t BLE_SetConfig(void)
{
	//设置波特率为115200
	//USART3_SendString("AT+BAUD8\r\n");
	//delay_ms(100);
	
	//设置名字
	USART3_SendString("AT+NAMEGEC_TEACHER\r\n");
	delay_ms(200);

	//设置匹配密码
	USART3_SendString("AT+PIN000000\r\n");
	delay_ms(200);
	return 0;
}


int main(void)
{ 
   SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8); 
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   
 
	// BEEP_Init();
	//LED_Init();		

	//系统定时器初始化，时钟源来自HCLK，且进行8分频，
	//系统定时器时钟频率=168MHz/8=21MHz
	
		
	//设置中断优先级分组2
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
	
	//串口1,波特率115200bps,开启接收中断
	USART1_Init(115200);
	
	//串口3,波特率9600bps,开启接收中断
	  USART3_Init(9600);
	
	//配printf("置蓝牙4.0模块
	BLE_SetConfig();
	
	//GPIO_ResetBits(GPIOF,GPIO_Pin_9  | GPIO_Pin_10);
	//TIM1_CH3_PWMoutout();
	//TIM13_CH1_PWM_OUTOUT();
	  
  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
	//clear(); 
	LED_Init();
	key_init();
	key1_exti0_init();
	key2_exti2_init();
	key3_exti3_init();
	key4_exti4_init();
	while(1)
	{   
   opion_BULETOOTH();
		key_led();  
	}

}
void USART1_IRQHandler(void)                				//串口1中断服务程序
{
//	unsigned char d;
	
	//判断中断是否触发
	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  	//接收中断
	{
		//从串口1RX接收数据保存到数组
		g_usart1_recv_buf[g_usart1_recv_cnt]=USART_ReceiveData(USART1);	
		
		//记录多接受了多少个数据
		g_usart1_recv_cnt++;
		
		
		
		//检测到换行符或接收的数据满的时候则发送数据
		if(g_usart1_recv_buf[g_usart1_recv_cnt-1]=='\n' || g_usart1_recv_cnt>=(sizeof g_usart1_recv_buf)-1)
		{
			//发送固定字节数据到串口3
			USART3_SendBytes(g_usart1_recv_buf,g_usart1_recv_cnt);
			
			g_usart1_recv_cnt = 0;
		}
	} 
} 



void USART3_IRQHandler(void)
{   
//	unsigned char d;
	
	/* USART in Receiver mode 判断串口中断3是否触发*/
	if (USART_GetITStatus(USART3, USART_IT_RXNE) == SET)  
	{  
#if 1 
	   
		
		//从串口3接收数据保存到数组
		g_usart3_recv_buf[g_usart3_recv_cnt]=USART_ReceiveData(USART3);	
		
		g_usart3_recv_cnt++;
		d=USART_ReceiveData(USART3);
		if(d=='A')
		{FLAG=1;
		printf("beep_on\n");}
		else if(d=='B')
			FLAG=2;
		else if(d=='C')
			FLAG=3;
		else if(d=='D')
			FLAG=4;
		else if(d=='E')
			FLAG=5;
		else if(d=='F')
			FLAG=6;
		else if(d=='G')
			FLAG=7;
		else if(d=='H')
			FLAG=8;
		
		  
		//检测到换行符或接收的数据满的时候则发送数据
		if(g_usart3_recv_buf[g_usart3_recv_cnt-1]=='\n' || g_usart3_recv_cnt>=(sizeof g_usart3_recv_buf)-1)
		{
			//发送固定字节数据到串口1
			USART1_SendBytes(g_usart3_recv_buf,g_usart3_recv_cnt);
			
			g_usart3_recv_cnt = 0;
			count++;

		}
#else
		//d=USART_ReceiveData(USART3);
		USART1_SendBytes(&d,1);
#endif
	}
}

